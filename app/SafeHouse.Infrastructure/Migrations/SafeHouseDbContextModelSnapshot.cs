// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SafeHouse.Infrastructure.Data;

namespace SafeHouse.Infrastructure.Migrations
{
    [DbContext(typeof(SafeHouseDbContext))]
    partial class SafeHouseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SafeHouse.Core.Entities.ActivityDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Activity")
                        .HasMaxLength(512);

                    b.Property<DateTime>("CreationDate");

                    b.Property<Guid?>("IndividualPlanId");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<string>("ResponsiblePerson")
                        .HasMaxLength(32);

                    b.Property<string>("TimeLimit")
                        .HasMaxLength(32);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("IndividualPlanId");

                    b.ToTable("ActivityDetails");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.Carton", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressStreetName")
                        .HasMaxLength(100);

                    b.Property<string>("AddressStreetNumber")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<bool>("EvaluationDone");

                    b.Property<string>("FathersLastName")
                        .HasMaxLength(32);

                    b.Property<string>("FathersName")
                        .HasMaxLength(32);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("Gender");

                    b.Property<bool>("IndividualPlanDone");

                    b.Property<bool>("IndividualPlanRevised");

                    b.Property<bool>("InitialEvaluationDone");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("MothersLastName")
                        .HasMaxLength(32);

                    b.Property<string>("MothersName")
                        .HasMaxLength(32);

                    b.Property<string>("Nickname")
                        .HasMaxLength(32);

                    b.Property<bool>("NotificationsEnabled");

                    b.Property<int>("NumberOfVisits");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Cartons");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.DailyEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("CartonId");

                    b.Property<bool>("Breakfast");

                    b.Property<bool>("Lunch");

                    b.Property<bool>("Diner");

                    b.Property<bool>("Bath");

                    b.Property<bool>("LiecesRemoval");

                    b.Property<bool>("Clothes");

                    b.Property<bool>("VerballySocialCenter");

                    b.Property<bool>("VerballyEducation");

                    b.Property<bool>("VerballyCitizensAssociations");

                    b.Property<bool>("VerballyHealthInstitutions");

                    b.Property<bool>("VerballyPolice");

                    b.Property<bool>("VerballyOther");

                    b.Property<bool>("WrittenSocialCenter");

                    b.Property<bool>("WrittenEducation");

                    b.Property<bool>("WrittenCitizensAssociations");

                    b.Property<bool>("WrittenHealthInstitutions");

                    b.Property<bool>("WrittenPolice");

                    b.Property<bool>("WrittenOther");

                    b.Property<bool>("CbDecisionMakingSkills");

                    b.Property<bool>("CbProblemSolvingSkills");

                    b.Property<bool>("CbAssertiveCommunication");

                    b.Property<bool>("CbHowToSayNo");

                    b.Property<bool>("CbAwarenessOfYourself");

                    b.Property<bool>("CbRecognizingAndManagingEmotions");

                    b.Property<bool>("CbEmpathy");

                    b.Property<bool>("CbConfrontationWithStress");

                    b.Property<bool>("CbMaintainingPersonalHygiene");

                    b.Property<bool>("CbMaintainingHygieneOfClothingAndFootwear");

                    b.Property<bool>("CbHealth");

                    b.Property<bool>("CbPersonalSecurityAndCrisisManagementSituations");

                    b.Property<bool>("CbTakingCareOfPersonalFinances");

                    b.Property<bool>("CbMaintainingHygieneOfThePlaceOfResidence");

                    b.Property<bool>("CbUseOfHomeAppliances");

                    b.Property<bool>("CbMealPreparationAndServing");

                    b.Property<bool>("CbBehaviorAtTheTable");

                    b.Property<bool>("CbProcurementOfGroceries");

                    b.Property<bool>("CbHealthCareDuringPregnancy");

                    b.Property<bool>("CbPhysicalCareOfNewbornAndInfant");

                    b.Property<bool>("CbExpressingLoveForYourChild");

                    b.Property<bool>("CbChildProtection");

                    b.Property<bool>("CbStimulatingTheChild");

                    b.Property<bool>("CbIssuingCersonalDocuments");

                    b.Property<bool>("CbUseOfTheClock");

                    b.Property<bool>("CbTrafficRegulationsAndSigns");

                    b.Property<bool>("CbUtilizingCommunityResources");

                    b.Property<bool>("CbNavigatingTheSpace");

                    b.Property<bool>("CbUseOfMedia");

                    b.Property<bool>("CbActiveJobSearch");

                    b.Property<string>("TxtDecisionMakingSkills")
                        .HasMaxLength(256);

                    b.Property<string>("TxtProblemSolvingSkills")
                        .HasMaxLength(256);

                    b.Property<string>("TxtAssertiveCommunication")
                        .HasMaxLength(256);

                    b.Property<string>("TxtHowToSayNo")
                        .HasMaxLength(256);

                    b.Property<string>("TxtAwarenessOfYourself")
                        .HasMaxLength(256);

                    b.Property<string>("TxtRecognizingAndManagingEmotions")
                        .HasMaxLength(256);

                    b.Property<string>("TxtEmpathy")
                        .HasMaxLength(256);

                    b.Property<string>("TxtConfrontationWithStress")
                        .HasMaxLength(256);

                    b.Property<string>("TxtMaintainingPersonalHygiene")
                        .HasMaxLength(256);

                    b.Property<string>("TxtMaintainingHygieneOfClothingAndFootwear")
                        .HasMaxLength(256);

                    b.Property<string>("TxtHealth")
                        .HasMaxLength(256);

                    b.Property<string>("TxtPersonalSecurityAndCrisisManagementSituations")
                        .HasMaxLength(256);

                    b.Property<string>("TxtTakingCareOfPersonalFinances")
                        .HasMaxLength(256);

                    b.Property<string>("TxtMaintainingHygieneOfThePlaceOfResidence")
                        .HasMaxLength(256);

                    b.Property<string>("TxtUseOfHomeAppliances")
                        .HasMaxLength(256);

                    b.Property<string>("TxtMealPreparationAndServing")
                        .HasMaxLength(256);

                    b.Property<string>("TxtBehaviorAtTheTable")
                        .HasMaxLength(256);

                    b.Property<string>("TxtProcurementOfGroceries")
                        .HasMaxLength(256);

                    b.Property<string>("TxtHealthCareDuringPregnancy")
                        .HasMaxLength(256);

                    b.Property<string>("TxtPhysicalCareOfNewbornAndInfant")
                        .HasMaxLength(256);

                    b.Property<string>("TxtExpressingLoveForYourChild")
                        .HasMaxLength(256);

                    b.Property<string>("TxtChildProtection")
                        .HasMaxLength(256);

                    b.Property<string>("TxtStimulatingTheChild")
                        .HasMaxLength(256);

                    b.Property<string>("TxtIssuingCersonalDocuments")
                        .HasMaxLength(256);

                    b.Property<string>("TxtUseOfTheClock")
                        .HasMaxLength(256);

                    b.Property<string>("TxtTrafficRegulationsAndSigns")
                        .HasMaxLength(256);

                    b.Property<string>("TxtUtilizingCommunityResources")
                        .HasMaxLength(256);

                    b.Property<string>("TxtNavigatingTheSpace")
                        .HasMaxLength(256);

                    b.Property<string>("TxtUseOfMedia")
                        .HasMaxLength(256);

                    b.Property<string>("TxtActiveJobSearch")
                        .HasMaxLength(256);

                    b.Property<string>("EdictiveWorkshops")
                        .HasMaxLength(256);

                    b.Property<string>("CreativeWorkshops")
                        .HasMaxLength(256);

                    b.Property<string>("Homework")
                        .HasMaxLength(256);

                    b.Property<string>("Training")
                        .HasMaxLength(256);

                    b.Property<string>("LearningSchoolMaterials")
                        .HasMaxLength(256);

                    b.Property<string>("InterventionsForTheDevelopmentOfCognitiveFunctions")
                        .HasMaxLength(256);
                    b.Property<string>("TelephoneContact")
                        .HasMaxLength(256);

                    b.Property<string>("PersonalContact")
                        .HasMaxLength(256);

                    b.Property<string>("InterventionAtTheSafeHouse")
                        .HasMaxLength(256);

                    b.Property<string>("Counseling")
                        .HasMaxLength(256);

                    b.Property<string>("Medication")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("Id");

                    b.HasIndex("CartonId");

                    b.ToTable("DailyEntries");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.Evaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdvicedLevelOfSupport")
                        .HasMaxLength(256);

                    b.Property<int>("Age");

                    b.Property<string>("BasicPhysicalNeeds")
                        .HasMaxLength(512);

                    b.Property<string>("BehaviorRisks")
                        .HasMaxLength(256);

                    b.Property<string>("Capabilities")
                        .HasMaxLength(512);

                    b.Property<Guid?>("CartonId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CulturalSpecifics")
                        .HasMaxLength(512);

                    b.Property<DateTime>("Date");

                    b.Property<string>("DedicatedWorker")
                        .HasMaxLength(256);

                    b.Property<string>("DominantBehaviors")
                        .HasMaxLength(512);

                    b.Property<string>("DominantEmotions")
                        .HasMaxLength(512);

                    b.Property<string>("EducationalNeeds")
                        .HasMaxLength(512);

                    b.Property<string>("EvaluationDoneBy")
                        .HasMaxLength(256);

                    b.Property<string>("FamilyMembers")
                        .HasMaxLength(32);

                    b.Property<string>("FamilyRisks")
                        .HasMaxLength(256);

                    b.Property<string>("FamilyStrenghts")
                        .HasMaxLength(256);

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<string>("OtherMembers")
                        .HasMaxLength(256);

                    b.Property<string>("OtherNeeds")
                        .HasMaxLength(512);

                    b.Property<string>("OtherRisks")
                        .HasMaxLength(256);

                    b.Property<string>("OtherStrenghts")
                        .HasMaxLength(256);

                    b.Property<string>("PersonalStrenghts")
                        .HasMaxLength(256);

                    b.Property<string>("PsyhoSocialNeeds")
                        .HasMaxLength(512);

                    b.Property<string>("SchoolStatus")
                        .HasMaxLength(32);

                    b.Property<string>("SurroundRisks")
                        .HasMaxLength(256);

                    b.Property<string>("SurroundStrenghts")
                        .HasMaxLength(256);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CartonId");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.FirstEvaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Attitude")
                        .HasMaxLength(512);

                    b.Property<bool>("Begging");

                    b.Property<bool>("Capability");

                    b.Property<Guid?>("CartonId");

                    b.Property<string>("CaseLeaderName")
                        .HasMaxLength(512);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DiagnosedDisease")
                        .HasMaxLength(512);

                    b.Property<string>("DirectedFromName")
                        .HasMaxLength(512);

                    b.Property<string>("DirectedToName")
                        .HasMaxLength(512);

                    b.Property<bool>("DumpsterDiving");

                    b.Property<string>("EvaluationDoneBy")
                        .HasMaxLength(512);

                    b.Property<string>("EvaluationRevisedBy")
                        .HasMaxLength(512);

                    b.Property<string>("Expectations")
                        .HasMaxLength(512);

                    b.Property<string>("Explanation")
                        .HasMaxLength(512);

                    b.Property<bool>("ExtremelyPoor");

                    b.Property<DateTime?>("FinishedEvaluation");

                    b.Property<string>("GuardiansName")
                        .HasMaxLength(512);

                    b.Property<string>("HealthCard")
                        .HasMaxLength(512);

                    b.Property<bool>("HelpingFamilyOnStreet");

                    b.Property<string>("IndividualMovementAbility")
                        .HasMaxLength(512);

                    b.Property<string>("Languages")
                        .HasMaxLength(512);

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<int>("LivingSpace");

                    b.Property<bool>("OnTheWaitingList");

                    b.Property<string>("Other")
                        .HasMaxLength(512);

                    b.Property<string>("OtherChildrenName")
                        .HasMaxLength(512);

                    b.Property<string>("OtherMembersName")
                        .HasMaxLength(512);

                    b.Property<string>("OtherSuitability")
                        .HasMaxLength(512);

                    b.Property<string>("PhysicalDescription")
                        .HasMaxLength(512);

                    b.Property<string>("PriorityNeeds")
                        .HasMaxLength(512);

                    b.Property<bool>("Prostituting");

                    b.Property<string>("SchoolAndGrade")
                        .HasMaxLength(512);

                    b.Property<bool>("SellsOnStreet");

                    b.Property<DateTime?>("ServiceStart");

                    b.Property<bool>("SleepOnStreet");

                    b.Property<DateTime?>("StartedEvaluation");

                    b.Property<string>("VerbalComunicationAbility")
                        .HasMaxLength(512);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CartonId");

                    b.ToTable("FirstEvaluations");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.GoalAndResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Goal")
                        .HasMaxLength(100);

                    b.Property<Guid?>("IndividualPlanId");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<string>("Result")
                        .HasMaxLength(100);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("IndividualPlanId");

                    b.ToTable("GoalAndResults");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.IncludedPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("FirstName")
                        .HasMaxLength(32);

                    b.Property<string>("Function")
                        .HasMaxLength(32);

                    b.Property<Guid?>("IndividualPlanId");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<string>("LastName")
                        .HasMaxLength(32);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("IndividualPlanId");

                    b.ToTable("IncludedPersons");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.IndividualPlan", b =>
                {

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();                    
                    b.HasOne("SafeHouse.Core.Entities.Carton", "Carton")
                        .WithMany()
                        .HasForeignKey("CartonId");
                    b.Property<string>("GoalsAndResults")
                        .HasMaxLength(512);

                    b.Property<string>("ActivitiesAndDue")
                        .HasMaxLength(512);

                    b.Property<string>("InvolvedPersons")
                        .HasMaxLength(512);
                    b.Property<DateTime>("Date");
                    b.Property<DateTime>("CrDueeationDate");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.LifeSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsGroupSkill");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<int>("LifeSkillType")
                        .HasMaxLength(1024);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("LifeSkills");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.LifeSkillDailyEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<Guid?>("DailyEntryId");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<Guid?>("LifeSkillId");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DailyEntryId");

                    b.HasIndex("LifeSkillId");

                    b.ToTable("LifeSkillDailyEntries");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.SafeHouseUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommonName")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("SafeHouseUsers");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.SchoolActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<Guid?>("DailyEntryId");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<int>("Type");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DailyEntryId");

                    b.ToTable("SchoolActivities");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.Suitability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Suitabilities");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.SuitabilityCache", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<string>("Name")
                        .HasMaxLength(80);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("SuitabilityCaches");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.SuitabilityItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<Guid?>("SuitabilityCacheId");

                    b.Property<Guid?>("SuitabilityId");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("SuitabilityCacheId");

                    b.HasIndex("SuitabilityId");

                    b.ToTable("SuitabilityItems");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.Workshop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<Guid?>("DailyEntryId");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<int>("Number");

                    b.Property<int>("Type");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DailyEntryId");

                    b.ToTable("Workshops");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.ActivityDetails", b =>
                {
                    b.HasOne("SafeHouse.Core.Entities.IndividualPlan", "IndividualPlan")
                        .WithMany()
                        .HasForeignKey("IndividualPlanId");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.DailyEntry", b =>
                {
                    b.HasOne("SafeHouse.Core.Entities.Carton", "Carton")
                        .WithMany()
                        .HasForeignKey("CartonId");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.Evaluation", b =>
                {
                    b.HasOne("SafeHouse.Core.Entities.Carton", "Carton")
                        .WithMany()
                        .HasForeignKey("CartonId");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.FirstEvaluation", b =>
                {
                    b.HasOne("SafeHouse.Core.Entities.Carton", "Carton")
                        .WithMany()
                        .HasForeignKey("CartonId");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.GoalAndResult", b =>
                {
                    b.HasOne("SafeHouse.Core.Entities.IndividualPlan", "IndividualPlan")
                        .WithMany()
                        .HasForeignKey("IndividualPlanId");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.IncludedPerson", b =>
                {
                    b.HasOne("SafeHouse.Core.Entities.IndividualPlan", "IndividualPlan")
                        .WithMany()
                        .HasForeignKey("IndividualPlanId");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.IndividualPlan", b =>
                {
                    b.HasOne("SafeHouse.Core.Entities.Carton", "Carton")
                        .WithMany()
                        .HasForeignKey("CartonId");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.LifeSkillDailyEntry", b =>
                {
                    b.HasOne("SafeHouse.Core.Entities.DailyEntry", "DailyEntry")
                        .WithMany()
                        .HasForeignKey("DailyEntryId");

                    b.HasOne("SafeHouse.Core.Entities.LifeSkill", "LifeSkill")
                        .WithMany()
                        .HasForeignKey("LifeSkillId");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.SchoolActivity", b =>
                {
                    b.HasOne("SafeHouse.Core.Entities.DailyEntry", "DailyEntry")
                        .WithMany()
                        .HasForeignKey("DailyEntryId");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.SuitabilityItem", b =>
                {
                    b.HasOne("SafeHouse.Core.Entities.SuitabilityCache", "SuitabilityCache")
                        .WithMany()
                        .HasForeignKey("SuitabilityCacheId");

                    b.HasOne("SafeHouse.Core.Entities.Suitability")
                        .WithMany("SuitabilityItems")
                        .HasForeignKey("SuitabilityId");
                });

            modelBuilder.Entity("SafeHouse.Core.Entities.Workshop", b =>
                {
                    b.HasOne("SafeHouse.Core.Entities.DailyEntry", "DailyEntry")
                        .WithMany()
                        .HasForeignKey("DailyEntryId");
                });
#pragma warning restore 612, 618
        }
    }
}
